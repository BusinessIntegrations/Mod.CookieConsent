#region Using
using System;
using Mod.CookieConsent.Models;
using Orchard.Caching;
using Orchard.ContentManagement;
using Orchard.ContentManagement.Drivers;
using Orchard.ContentManagement.Handlers;
using Orchard.Localization;
using Orchard.UI.Notify;
#endregion

// This code was generated by Orchardizer

namespace Mod.CookieConsent.Drivers {
    public class CookieConsentSettingsPartDriver : ContentPartDriver<CookieConsentSettingsPart> {
        private readonly INotifier _notifier;
        private readonly ISignals _signals;

        public CookieConsentSettingsPartDriver(ISignals signals, INotifier notifier) {
            _signals = signals;
            _notifier = notifier;
            T = NullLocalizer.Instance;
        }

        #region Properties
        public Localizer T { get; set; }
        protected override string Prefix => "CookieConsentSettingsPart";
        #endregion

        #region Methods
        protected override DriverResult Editor(CookieConsentSettingsPart part, dynamic shapeHelper) {
            return ContentShape("Parts_CookieConsentSettingsPart_Edit",
                    () => shapeHelper.EditorTemplate(TemplateName: "Parts/CookieConsentSettingsPart", Model: part, Prefix: Prefix))
                .OnGroup(Constants.AdminMenuName);
        }

        protected override DriverResult Editor(CookieConsentSettingsPart part, IUpdateModel updater, dynamic shapeHelper) {
            if (updater.TryUpdateModel(part, Prefix, null, null)) {
                _notifier.Add(NotifyType.Information, T("Remember if you are using the Output Cache that you need to clear it."));
                _signals.Trigger(Constants.ModCookieConsentChanged);
            }
            return Editor(part, shapeHelper);
        }

        protected override void Exporting(CookieConsentSettingsPart part, ExportContentContext context) {
            context.Element(part.PartDefinition.Name)
                .SetAttributeValue("Message", part.Message);
            context.Element(part.PartDefinition.Name)
                .SetAttributeValue("Dismiss", part.Dismiss);
            context.Element(part.PartDefinition.Name)
                .SetAttributeValue("LearnMore", part.LearnMore);
            context.Element(part.PartDefinition.Name)
                .SetAttributeValue("Link", part.Link);
            context.Element(part.PartDefinition.Name)
                .SetAttributeValue("Theme", part.Theme);
            context.Element(part.PartDefinition.Name)
                .SetAttributeValue("Path", part.Path);
            context.Element(part.PartDefinition.Name)
                .SetAttributeValue("ExpiryDays", part.ExpiryDays);
            context.Element(part.PartDefinition.Name)
                .SetAttributeValue("Target", part.Target);
            context.Element(part.PartDefinition.Name)
                .SetAttributeValue("Enabled", part.Enabled);
        }

        protected override void Importing(CookieConsentSettingsPart part, ImportContentContext context) {
            var partName = part.PartDefinition.Name;
            var message = context.Attribute(partName, "Message");
            if (message != null) {
                part.Message = message;
            }
            var dismiss = context.Attribute(partName, "Dismiss");
            if (dismiss != null) {
                part.Dismiss = dismiss;
            }
            var learnMore = context.Attribute(partName, "LearnMore");
            if (learnMore != null) {
                part.LearnMore = learnMore;
            }
            var link = context.Attribute(partName, "Link");
            if (link != null) {
                part.Link = link;
            }
            var theme = context.Attribute(partName, "Theme");
            if (theme != null) {
                part.Theme = theme;
            }
            var path = context.Attribute(partName, "Path");
            if (path != null) {
                part.Path = path;
            }
            var expiryDays = context.Attribute(partName, "ExpiryDays");
            if (expiryDays != null) {
                part.ExpiryDays = Convert.ToInt32(expiryDays);
            }
            var target = context.Attribute(partName, "Target");
            if (target != null) {
                part.Target = target;
            }
            var enabled = context.Attribute(partName, "Enabled");
            if (enabled != null) {
                part.Enabled = Convert.ToBoolean(enabled);
            }
        }
        #endregion
    }
}
